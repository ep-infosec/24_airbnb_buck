/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{namespace buck.e2e}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'Building End to End tests for Buck' /}
    {param navid: 'extending_e2e_tests' /}
    {param prettify: true /}
    {param description}
      A guide to adding E2E tests for Buck
    {/param}
    {param content}

<p>
Buck has a framework that allows easy creation of End to End testing of Buck's functionality. It
includes features like:
</p>

<ul>
<li>Easy separation of tests based on permutations of environment variables, commands options,
.buckconfig values, etc.</li>
<li>Standard JUnit Test Runner annotation support (<code>@After</code>, <code>@Before</code>,
<code>@Rule</code>, etc)</li>
<li>Workspace that gives interface in to it to run buck commands, and perform actions</li>
<li>Easy access to running the programs built by a "build" command</li>
<li>Pre-made templates built for general use-cases</li>
</ul>

<p>
In this, we will show how to create a basic test that builds a very simple CXX project, and go over
how this test could be extended further for more complicated testing scenarios.
</p>

<h3>The Basic Build</h3>

{literal}<pre class="prettyprint lang-basic">
// imports and package name omitted

@RunWith(EndToEndRunner.class)
public class CxxEndToEndTest {

  private static final String successTarget =
    "//simple_successful_helloworld:simple_successful_helloworld";

  @Environment
  public static EndToEndEnvironment baseEnvironment() {
    return new EndToEndEnvironment()
        .addTemplates("cxx")
        .withCommand("build")
        .withTargets(successTarget);
  }

  /** Determines that buck successfully outputs proper programs */
  @Test
  public void shouldBuild(EndToEndTestDescriptor test, EndToEndWorkspace workspace)
      throws Exception {
    ProcessResult result = workspace.runBuckCommand(test);
    result.assertSuccess("Did not successfully build");
  }
}
</pre>{/literal}

<p>
This will run two individual tests, that spawn independent workspaces, one using buckd and one not.
They will both build the <code>simple_sucessful_helloworld</code> target and verify that this build
was successful. Let's go over these things step by step.
</p>

<h3>Calling the Runner</h3>
{literal}<pre class="prettyprint lang-basic">
@RunWith(EndToEndRunner.class)
public class CxxEndToEndTest {
</pre>{/literal}

<p>
This simply declares that you are using the EndToEndRunner
</p>

<h3>@Environment</h3>

{literal}<pre class="prettyprint lang-basic">
private static final String successTarget =
      "//simple_successful_helloworld:simple_successful_helloworld";

@Environment
public static EndToEndEnvironment baseEnvironment() {
  return new EndToEndEnvironment()
      .addTemplates("cxx")
      .withCommand("build")
      .withTargets(successTarget);
}
</pre>{/literal}

<p>
The <strong>EndToEndEnvironment</strong> describes the configurations you want your tests to run in,
they are found by the Runner using the <code>@Environment</code> annotation. Methods described by
this annotation must be public static functions that return <strong>EndToEndEnvironment</strong> objects.
These will create the workspace with the given permutations by default for all verification methods
(unless you use <code>@EnvironmentFor</code>). In this test we define:
</p>

<ul>
<li>To import the <a href="https://github.com/facebook/buck/tree/master/test/com/facebook/buck/testutil/endtoend/testdata/cxx">
<code>cxx</code></a> template in to the workspace for all tests that use this environment</li>
<li>That the provided buck command will be a <code>build</code> command with the <code>successTarget</code> as its target</li>
</ul>

<p>
In all, the <strong>EndToEndEnvironment</strong> supports:
</p>

<h4>Templates</h4>
<p>
Templates are pre-made project structures to be imported in to the Workspace created by the Runner
for each test. These directories can be found in the <a href="https://github.com/facebook/buck/tree/master/test/com/facebook/buck/testutil/endtoend/testdata">
<code>testdata</code></a> directory.
</p>
<p>
Any files with the extensions .fixture, .fixtureTestClass, or .fixtureTestClassVerificationMethodName
will be copied over to the new directory without that extension (this is normally used for BUCK
files), with the most specific fixture taking precedence.
</p>

{literal}<pre class="prettyprint lang-basic">
...
    .addTemplates("mobile", "test_runners")
</pre>{/literal}

<h4>Local Config Sets</h4>
<p>
For each set added using <code>.addLocalConfigSet</code>, new permutations of tests will be created with this
set of configurations as if they were set in a .buckconfig.local file. The method takes a Map,
where the entries represent section - option - value as if in the configuration files.
</p>

<p>
By default, tests will be run with a a single empty set, but this will be replaced if any
configuration set is added.
</p>

<p>
Some useful pre-made configuration sets can be reused by using the <strong>ConfigSetBuilder</strong>.
</p>

{literal}<pre class="prettyprint lang-basic">
ConfigSetBuilder configSetBuilder = new ConfigSetBuilder()
...
    .addLocalConfigSet(configSetBuilder.build())
    .addLocalConfigSet(configSetBuilder.addSourceABIConfigSet().build());
</pre>{/literal}

<h4>Variable Maps</h4>
<p>
By default, the Runner will pass along any environment variables (<code>JAVA_HOME</code>, <code>
ANDROID_SDK</code>, etc.)
to the processes it creates. To override these, you would add that variable to a map.
</p>

<p>
For each map added using <code>.addVariableMap</code>, new permutations of tests will be created
with this map.
</p>

<p>
By default, tests will be run with a a single empty set, but this will be replaced if any
configuration set is added.
</p>

{literal}<pre class="prettyprint lang-basic">
Map<String, String> variableOverride = new Hashmap<>();
variableOverride.put("ANDROID_SDK", "/opt/android_sdk");
...
    .addVariableMap(variableOverride)
</pre>{/literal}

<h4>Buckd Status</h4>
<p>
By default, we run end to end tests without creating a new buckd to run the commands against.
If we want to, then we feed a different <strong>ToggleState</strong> in to the Environment,
which defines if we want the test to run with buckd, without buckd, or to create two permutations
with and without buckd respectively.
</p>

{literal}<pre class="prettyprint lang-basic">
...
    .withBuckdToggled(ToggleState.ON_OFF)
</pre>{/literal}

<h4>Command</h4>
<p>
This is the command that will be sent to buck (i.e. <code>build</code>, <code>query</code>, etc.)
</p>

{literal}<pre class="prettyprint lang-basic">
...
    .withCommand("build")
</pre>{/literal}

<h4>Arguments</h4>
<p>
These are the arguments to add to the command that will be sent to buck (i.e. flags)
</p>

{literal}<pre class="prettyprint lang-basic">
...
    .withArguments("--show-output")
</pre>{/literal}

<h4>Targets</h4>
<p>
These are the build targets to run the buck commands against.
</p>
<p>
<strong>Note:</strong> that these targets must be fully qualified, as the runner will automatically
append flavors as appropriate for platform compatibility.
</p>

{literal}<pre class="prettyprint lang-basic">
...
    .withTargets("//android:demo-app")
</pre>{/literal}


<h3>@EnvironmentFor</h3>

{literal}<pre class="prettyprint lang-basic">
@EnvironmentFor(testNames = {"verificationMethodName"})
public static EndToEndEnvironment baseEnvironment() {
</pre>{/literal}

<p>
The <strong>@EnvironmentFor</strong> annotation marks environments specific to specified tests.
These annotations must mark verification methods that exist in the given test class.
</p>

<h3>@Test</h3>

{literal}<pre class="prettyprint lang-basic">
/** Determines that buck successfully outputs proper programs */
@Test
public void shouldBuildAndRun(EndToEndTestDescriptor test, EndToEndWorkspace workspace)
    throws Exception {
  ProcessResult result = workspace.runBuckCommand(test);
  result.assertSuccess("Did not successfully build");
}
</pre>{/literal}

<p>
The <strong>@Test</strong> annotation marks verification methods for the <strong>EndToEndRunner
</strong>. The parameters it sends to each test is:
</p>

<ul>
<li>The <strong>EndToEndTestDescriptor</strong> which contains information on the specific
configuration the command was run on.</li>
<li>The <strong>EndToEndWorkspace</strong> which allows access to the workspace that has been
prepared for the test to be ran. This workspace additionally provides convenience functions like
the ability to launch non-blocking buck command processes, or running built non-mobile targets.</li>
</ul>

<p>
In this test, we build using the ability to run a buck command directly from a <strong>
TestDescriptor</strong>. We then verify the test successfully built using the given process
result.
</p>

<h3>Extending Templates</h3>

<p>
If a template does not have something you need, it is preferred that you find a way for that
template to work for you instead of creating a brand new one. If you do modify a template, please
make sure that other tests using that template still work (this is automated in regular test runs).
</p>
<p>
There are a few ways you can extend templates:
</p>

<ul>
<li><strong>Fixture files</strong>: as defined in the templates section. These are useful for cases where you
want to modify existing files for specific test cases</li>
<li><strong>Adding new rules/dependencies</strong>: This is fairly self-explanatory, but if you see tricky
corner cases not in the current templates for that build type, that's a good reason to add that case
to the template. Additions are generally more welcome than modifications to the templates.</li>
Please make sure to update the documentation for these templates when you do make any changes,
which can be found in the given template's E2E test class. This documentation includes ascii charts
of the dependency charts for these templates which should be maintained.
<li><strong>Adding new templates</strong>: This approach should be used for when a type of project
structure is not represented by an existing template, or if you imagine that the template can be
added to many other templates quite easily (an example would be a template containing a set of
external test runners). Please make sure that these new templates work on all applicable platforms
(i.e. Mac, Windows, Linux, etc.)</li>
</ul>

    {/param}
  {/call}
{/template}