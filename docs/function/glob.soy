/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

{namespace buck.glob}

/***/
{template .soyweb}
  {call buck.page}
    {param title: 'glob()' /}
    {param navid: 'function_glob' /}
    {param prettify: true /}
    {param description}
      The glob() function is used to specify a set of files using patterns.
    {/param}
    {param content}

{call buck.function}
{param status: 'FROZEN' /}
{param overview}

<p>
The <code>glob()</code> function specifies a set of files
using patterns. 
</p>

<p>
A pattern is structured as a <em>relative</em> path with
no repeated or trailing path separators, such as the forward slash
(<code>/</code>).
</p>

<p>
Patterns may contain shell-like wildcards, such as <code>*</code> , <code>?</code> , or <code>[<em>charset</em>]</code>.
</p>

<p>
Additionally, the path element, <code>**</code> , matches any subpath. For instance
</p>

<p>
<pre>
{literal}
foo&#x2F;**/bar
{/literal}
</pre>
</p>

<p>
is equivalent to 
</p>

<p>
<pre>
{literal}
["foo/bar", "foo&#x2F;*/bar", "foo&#x2F;*&#x2F;*/bar", ...]
{/literal}
</pre>
</p>

<p>
The patterns that specify the set of files to include&mdash;as well as
the patterns that specify the files to <em>exclude</em> (see the <code>exclude</code> parameter 
below)&mdash;must both be statically defined; you cannot generate these patterns 
dynamically at build time. 
</p>

{/param}

{param args}

{call buck.functionArg}
  {param desc}
  The first parameter is unnamed and is a list of patterns that match files under the current directory.
  {/param}
{/call}

{call buck.functionArg}
  {param name : 'exclude' /}
  {param default : '[]' /}
  {param desc}
    A list of patterns that identify files that should be removed from the set
    specified by the first parameter. You cannot specify both 
    the <code>exclude</code> parameter and the <code>excludes</code> parameter 
    because they serve the same purpose.
  {/param}
{/call}

{call buck.functionArg}
  {param name : 'include_dotfiles' /}
  {param default : 'False' /}
  {param desc}
  Specifies whether <code>*</code> and <code>**</code> patterns should capture file and directory names
  that start with a dot (<code>.</code>). By default, this parameter is false, which
  indicates that files that start with a dot are automatically excluded.
  {/param}
{/call}

{call buck.functionArg}
  {param name : 'excludes' /}
  {param default : '[]' /}
  {param desc}
    DEPRECATED 
    <br/> 
    This parameter is deprecated; use the <code>exclude</code> parameter instead of <code>excludes</code>.
    <br>
    A list of patterns that identify files that should be removed from the set
    specified by the first argument.
  {/param}
{/call}

{/param}

{param examples}

<p>
For the purposes of these examples, a <em>regular</em> file is one that 
is not a <em>dotfile</em>; a file is a dotfile if its path&mdash;relative 
to the current directory&mdash;includes at least one path element
that starts with a dot.
</p>

<p>
All the regular <code>.java</code> files in the current directory:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['*.java'])
{/literal}
</pre>
</p>


<p>
All the <code>.java</code> files in the current directory&mdash;including dotfiles:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['*.java'], include_dotfiles=True)
{/literal}
</pre>
</p>


<p>
All the files under the current directory:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F'], include_dotfiles=True)
{/literal}
</pre>
</p>


<p>
All the regular files under the directory <code>.git</code>:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['.git&#x2F**/'])
{/literal}
</pre>
</p>


<p>
All the files starting with <code>'.'</code> under regular (non-dot) directories:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F.*'])
{/literal}
</pre>
</p>


<p>
All the regular <code>.java</code> and <code>.aidl</code> files in the current directory:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['*.java', '*.aidl'])
{/literal}
</pre>
</p>


<p>
All the regular <code>.java</code> files under current directory:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F;*.java'])
{/literal}
</pre>
</p>


<p>
All of regular files under the current directory that end in <code>Test.java</code>:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F;*Test.java'])
{/literal}
</pre>
</p>


<p>
All the regular files under the current directory that end in <code>Test.java</code>, as well as <code>StringTests.java</code>:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F;*Test.java', 'StringTests.java'])
{/literal}
</pre>
</p>


<p>
All the regular files under the current directory that end in <code>Test.java</code>, <em>except</em> for <code>HaltingProblemTest.java</code>:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F;*Test.java'], exclude = ['HaltingProblemTest.java'])
{/literal}
</pre>
</p>


<p>
All the regular <code>.java</code> files under the current directory, <em>except</em> for those that end in <code>Test.java</code>:
</p>

<p>
<pre class="prettyprint lang-py">
{literal}
glob(['**&#x2F;*.java'], exclude = ['**&#x2F;*Test.java'])
{/literal}
</pre>
</p>

{/param}


{/call} // buck.function
    {/param} // content
  {/call}
{/template}
