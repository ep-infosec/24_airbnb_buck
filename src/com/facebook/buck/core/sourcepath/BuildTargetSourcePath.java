/*
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.facebook.buck.core.sourcepath;

import com.facebook.buck.core.model.BuildTarget;
import com.facebook.buck.core.model.BuildTargetWithOutputs;
import com.google.common.hash.HashCode;
import java.util.Optional;

/**
 * A {@link SourcePath} which resolves to some output generated by a {@link
 * com.facebook.buck.core.rules.BuildRule}.
 *
 * <p>The file is not guaranteed to exist until the {@link com.facebook.buck.core.rules.BuildRule}
 * has been built.
 */
public interface BuildTargetSourcePath extends SourcePath {

  /** @return the {@link BuildTargetWithOutputs} this {@code SourcePath} is associated with */
  BuildTargetWithOutputs getTargetWithOutputs();

  /**
   * @return the target of the {@link com.facebook.buck.core.rules.BuildRule} which generates the
   *     file.
   */
  default BuildTarget getTarget() {
    return getTargetWithOutputs().getBuildTarget();
  }

  /**
   * In rare cases, a BuildTargetSourcePath may know a hash of its content on disk before it even
   * creates its output. In this case, we can skip hashing its output files entirely and simply use
   * this precomputed hash code. Use Optional.empty() in the common case.
   */
  Optional<HashCode> getPrecomputedHash();

  /**
   * @return a string representation that is usable for rule keys, i.e. does not depend on absolute
   *     paths
   */
  default String representationForRuleKey() {
    return toString();
  }
}
