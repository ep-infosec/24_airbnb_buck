cxx_library(
    name = "simple",
    srcs = [
        "simple.c",
        "simple.cc",
        "simple.s",
    ],
)

cxx_binary(
    name = "binary_with_unused_header",
    srcs = [
        "source.cpp",
    ],
    headers = [
        "unused_header.h",
    ],
)

cxx_library(
    name = "binary_with_unused_header_nosymlinks",
    srcs = [
        "source.cpp",
    ],
    headers = [
        "unused_header.h",
    ],
    xcode_private_headers_symlinks = False,
    xcode_public_headers_symlinks = False,
)

genrule(
    name = "genheader",
    srcs = [
        "unused.dat",
    ],
    out = "genheader.h",
    cmd = "echo \"#define TEST\" > $OUT",
)

cxx_binary(
    name = "binary_using_generated_header",
    srcs = [
        "foo.cpp",
    ],
    headers = [
        ":genheader",
    ],
)

genrule(
    name = "genheaders_folder",
    out = "genheaders",
    cmd = "mkdir $OUT; echo \"#define TEST\" > $OUT/genheader.h",
    cmd_exe = "mkdir $OUT & echo \"#define TEST\" > $OUT\\genheader.h",
)

cxx_binary(
    name = "binary_using_location_include_path",
    srcs = [
        "foo.cpp",
    ],
    preprocessor_flags = [
        "-I$(location :genheaders_folder)",
    ],
)

genrule(
    name = "gensource",
    srcs = [
        "unused.dat",
    ],
    out = "bar.cpp",
    cmd = "echo \"int main() { return 4; }\" > $OUT",
)

cxx_binary(
    name = "binary_using_generated_source",
    srcs = [
        ":gensource",
    ],
)

cxx_binary(
    name = "binary_with_used_full_header",
    srcs = [
        "source_full_header.cpp",
    ],
    header_namespace = "prefix",
    headers = [
        "source_full_header.h",
    ],
)

cxx_library(
    name = "binary_with_used_full_header_nosymlinks",
    srcs = [
        "source_full_header.cpp",
    ],
    header_namespace = "prefix",
    headers = [
        "source_full_header.h",
    ],
    xcode_private_headers_symlinks = False,
    xcode_public_headers_symlinks = False,
)

cxx_binary(
    name = "binary_with_used_relative_header",
    srcs = [
        "source_relative_header.cpp",
    ],
    headers = [
        "source_relative_header.h",
    ],
)

cxx_library(
    name = "binary_with_used_relative_header_nosymlinks",
    srcs = [
        "source_relative_header.cpp",
    ],
    headers = [
        "source_relative_header.h",
    ],
    xcode_private_headers_symlinks = False,
    xcode_public_headers_symlinks = False,
)

genrule(
    name = "simple.s",
    srcs = [
        "simple.cc",
    ],
    out = "simple.s",
    cmd = "gcc -S -o $OUT $SRCS",
)

cxx_library(
    name = "simple_assembly",
    srcs = [
        ":simple.s",
    ],
)

cxx_library(
    name = "lang_compiler_flags",
    srcs = [
        "lang_compiler_flags.c",
        "lang_compiler_flags.cc",
    ],
    # Take advantage of the fact that Buck always applies compilation flags
    # to preprocessing.  That way we can define macros to test flags are being
    # set.
    lang_compiler_flags = {
        "c_cpp_output": ["-DBLAH_C"],
        "cxx_cpp_output": ["-DBLAH_CXX"],
    },
)

sh_binary(
    name = "cc",
    main = "cc.sh",
)

sh_binary(
    name = "cxx",
    main = "cxx.sh",
)

cxx_binary(
    name = "untracked_header",
    srcs = [
        "untracked_header.cpp",
    ],
)

cxx_binary(
    name = "two_untracked_headers",
    srcs = [
        "two_untracked_headers.cpp",
    ],
)

cxx_binary(
    name = "untracked_header_with_prefix_header",
    srcs = [
        "untracked_header.cpp",
    ],
    prefix_header = "untracked_header.pch",
)

cxx_binary(
    name = "binary_with_used_relative_parent_header",
    srcs = [
        "source_relative_parent_header/source.cpp",
    ],
    headers = [
        "source_relative_parent_header.h",
    ],
)

cxx_library(
    name = "binary_with_used_relative_parent_header_nosymlinks",
    srcs = [
        "source_relative_parent_header/source.cpp",
    ],
    headers = [
        "source_relative_parent_header.h",
    ],
    xcode_private_headers_symlinks = False,
    xcode_public_headers_symlinks = False,
)

apple_test(
    name = "with_xctest",
    srcs = [
        "apple_test.m",
    ],
    frameworks = [
        "$PLATFORM_DIR/Developer/Library/Frameworks/XCTest.framework",
        "$SDKROOT/System/Library/Frameworks/Foundation.framework",
    ],
    info_plist = "Test.plist",
)
