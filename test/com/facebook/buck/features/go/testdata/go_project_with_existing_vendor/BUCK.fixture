go_binary(
    name = "main",
    srcs = [
        ":main.go",
    ],
    deps = [
        ":a",
    ],
)

genrule(
    name = "main.go",
    out = "main.go",
    cmd = "echo 'package main\nimport \"a\"\nfunc main() { a.A() }\n' > $OUT",
)

go_library(
    name = "a",
    package_name = "a",
    srcs = [
        ":b",
        ":c=c1.go",
        ":c=c2.go",
    ],
)

genrule(
    name = "b",
    out = ".",
    cmd = "echo 'package a\nfunc A() {}\n' > $OUT/b1.go; echo 'package a\nfunc B() {}\n' > $OUT/b2.go;",
)

# copy files from :c separately
genrule(
    name = "c",
    out = ".",
    cmd = "echo 'package a\nfunc C() {}\n' > $OUT/c1.go; echo 'package a\nfunc D() {}\n' > $OUT/c2.go;",
)

genrule(
    name = "c=c1.go",
    out = "c1.go",
    cmd = "mkdir -p `dirname $OUT` && cp $(location :c)/c1.go $OUT",
)

genrule(
    name = "c=c2.go",
    out = "c2.go",
    cmd = "mkdir -p `dirname $OUT` && cp $(location :c)/c2.go $OUT",
)
