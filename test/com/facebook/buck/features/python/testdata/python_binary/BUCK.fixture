genrule(
    name = "gen",
    out = "out",
    cmd = "$(exe :bin) > $OUT",
)

python_binary(
    name = "bin",
    main_module = "main",
    deps = [
        ":lib",
    ],
)

python_library(
    name = "lib",
    srcs = [
        "foo/bar/mod.py",
        "main.py",
    ],
)

python_binary(
    name = "bin-with-native-libs",
    main_module = "main_with_native_libs",
    deps = [
        ":lib-with-native-libs",
    ],
)

python_library(
    name = "lib-with-native-libs",
    srcs = [
        "main_with_native_libs.py",
    ],
    deps = [
        ":foo",
    ],
)

cxx_library(
    name = "foo",
    srcs = [
        "foo.c",
    ],
    deps = [
        ":bar",
    ],
)

cxx_library(
    name = "bar",
    srcs = [
        "bar.c",
    ],
    exported_headers = [
        "bar.h",
    ],
    deps = [
        ":func",
    ],
)

cxx_library(
    name = "func",
    srcs = [
        "func.c",
    ],
    exported_headers = [
        "func.h",
    ],
)

python_binary(
    name = "bin-with-extra-dep",
    main_module = "main",
    deps = [
        ":extra",
        ":lib",
    ],
)

sh_binary(
    name = "pex_tool",
    main = "pex_tool.sh",
)

genrule(
    name = "extra",
    out = "out",
    cmd = "touch $OUT",
    cmd_exe = "echo > $OUT",
)

cxx_library(
    name = "platform_a",
    srcs = [
        "platform_a.c",
    ],
    exported_preprocessor_flags = [
        "-DPLATFORM_A",
    ],
)

cxx_library(
    name = "platform_b",
    srcs = [
        "platform_b.c",
    ],
    exported_preprocessor_flags = [
        "-DPLATFORM_B",
    ],
)

cxx_python_extension(
    name = "extension",
    srcs = [
        "extension.c",
    ],
)

python_binary(
    name = "binary_with_extension_a",
    main_module = "extension",
    platform = "a",
    deps = [
        ":extension",
    ],
)

python_binary(
    name = "binary_with_extension_b",
    main_module = "extension",
    platform = "b",
    deps = [
        ":extension",
    ],
)

python_library(
    name = "main_module",
    srcs = [
        "main_module.py",
    ],
)

python_binary(
    name = "main_module_bin",
    main_module = "main_module",
    deps = [
        ":main_module",
    ],
)

python_library(
    name = "main_module_with_prebuilt_dep",
    srcs = [
        "main_module_with_prebuilt_dep.py",
    ],
    deps = [
        "//external_sources:whl_dep",
    ],
)

python_binary(
    name = "main_module_with_prebuilt_dep_bin",
    main_module = "main_module_with_prebuilt_dep",
    deps = [
        ":main_module_with_prebuilt_dep",
        "//external_sources:python_lib",
    ],
)

python_binary(
    name = "main_module_with_prebuilt_dep_and_init_conflict_bin",
    main_module = "main_module_with_prebuilt_dep",
    deps = [
        ":main_module_with_prebuilt_dep",
        "//external_sources:python_lib_with_init_py",
    ],
)

python_binary(
    name = "main_module_with_prebuilt_dep_and_whl_init_conflict_bin",
    main_module = "main_module_with_prebuilt_dep",
    deps = [
        ":main_module_with_prebuilt_dep",
        "//external_sources:python_lib",
        "//external_sources:whl_dep_copy",
    ],
)

python_binary(
    name = "bin_compile",
    compile = True,
    main_module = "main",
    deps = [
        ":lib",
    ],
)
