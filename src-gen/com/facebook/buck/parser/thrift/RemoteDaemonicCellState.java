/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.parser.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class RemoteDaemonicCellState implements org.apache.thrift.TBase<RemoteDaemonicCellState, RemoteDaemonicCellState._Fields>, java.io.Serializable, Cloneable, Comparable<RemoteDaemonicCellState> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RemoteDaemonicCellState");

  private static final org.apache.thrift.protocol.TField ALL_RAW_NODES_JSONS_FIELD_DESC = new org.apache.thrift.protocol.TField("allRawNodesJsons", org.apache.thrift.protocol.TType.MAP, (short)1);
  private static final org.apache.thrift.protocol.TField BUILD_FILE_DEPENDENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("buildFileDependents", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField BUILD_FILE_ENV_FIELD_DESC = new org.apache.thrift.protocol.TField("buildFileEnv", org.apache.thrift.protocol.TType.MAP, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RemoteDaemonicCellStateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RemoteDaemonicCellStateTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> allRawNodesJsons; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> buildFileDependents; // optional
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>> buildFileEnv; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALL_RAW_NODES_JSONS((short)1, "allRawNodesJsons"),
    BUILD_FILE_DEPENDENTS((short)2, "buildFileDependents"),
    BUILD_FILE_ENV((short)3, "buildFileEnv");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALL_RAW_NODES_JSONS
          return ALL_RAW_NODES_JSONS;
        case 2: // BUILD_FILE_DEPENDENTS
          return BUILD_FILE_DEPENDENTS;
        case 3: // BUILD_FILE_ENV
          return BUILD_FILE_ENV;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ALL_RAW_NODES_JSONS,_Fields.BUILD_FILE_DEPENDENTS,_Fields.BUILD_FILE_ENV};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALL_RAW_NODES_JSONS, new org.apache.thrift.meta_data.FieldMetaData("allRawNodesJsons", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BUILD_FILE_DEPENDENTS, new org.apache.thrift.meta_data.FieldMetaData("buildFileDependents", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.BUILD_FILE_ENV, new org.apache.thrift.meta_data.FieldMetaData("buildFileEnv", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT                , "BuildFileEnvProperty")))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RemoteDaemonicCellState.class, metaDataMap);
  }

  public RemoteDaemonicCellState() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoteDaemonicCellState(RemoteDaemonicCellState other) {
    if (other.isSetAllRawNodesJsons()) {
      java.util.Map<java.lang.String,java.lang.String> __this__allRawNodesJsons = new java.util.HashMap<java.lang.String,java.lang.String>(other.allRawNodesJsons);
      this.allRawNodesJsons = __this__allRawNodesJsons;
    }
    if (other.isSetBuildFileDependents()) {
      java.util.Map<java.lang.String,java.util.List<java.lang.String>> __this__buildFileDependents = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(other.buildFileDependents.size());
      for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> other_element : other.buildFileDependents.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.List<java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__buildFileDependents_copy_key = other_element_key;

        java.util.List<java.lang.String> __this__buildFileDependents_copy_value = new java.util.ArrayList<java.lang.String>(other_element_value);

        __this__buildFileDependents.put(__this__buildFileDependents_copy_key, __this__buildFileDependents_copy_value);
      }
      this.buildFileDependents = __this__buildFileDependents;
    }
    if (other.isSetBuildFileEnv()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>> __this__buildFileEnv = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>>(other.buildFileEnv.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,BuildFileEnvProperty>> other_element : other.buildFileEnv.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,BuildFileEnvProperty> other_element_value = other_element.getValue();

        java.lang.String __this__buildFileEnv_copy_key = other_element_key;

        java.util.Map<java.lang.String,BuildFileEnvProperty> __this__buildFileEnv_copy_value = new java.util.HashMap<java.lang.String,BuildFileEnvProperty>(other_element_value.size());
        for (java.util.Map.Entry<java.lang.String, BuildFileEnvProperty> other_element_value_element : other_element_value.entrySet()) {

          java.lang.String other_element_value_element_key = other_element_value_element.getKey();
          BuildFileEnvProperty other_element_value_element_value = other_element_value_element.getValue();

          java.lang.String __this__buildFileEnv_copy_value_copy_key = other_element_value_element_key;

          BuildFileEnvProperty __this__buildFileEnv_copy_value_copy_value = new BuildFileEnvProperty(other_element_value_element_value);

          __this__buildFileEnv_copy_value.put(__this__buildFileEnv_copy_value_copy_key, __this__buildFileEnv_copy_value_copy_value);
        }

        __this__buildFileEnv.put(__this__buildFileEnv_copy_key, __this__buildFileEnv_copy_value);
      }
      this.buildFileEnv = __this__buildFileEnv;
    }
  }

  public RemoteDaemonicCellState deepCopy() {
    return new RemoteDaemonicCellState(this);
  }

  @Override
  public void clear() {
    this.allRawNodesJsons = null;
    this.buildFileDependents = null;
    this.buildFileEnv = null;
  }

  public int getAllRawNodesJsonsSize() {
    return (this.allRawNodesJsons == null) ? 0 : this.allRawNodesJsons.size();
  }

  public void putToAllRawNodesJsons(java.lang.String key, java.lang.String val) {
    if (this.allRawNodesJsons == null) {
      this.allRawNodesJsons = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.allRawNodesJsons.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getAllRawNodesJsons() {
    return this.allRawNodesJsons;
  }

  public RemoteDaemonicCellState setAllRawNodesJsons(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> allRawNodesJsons) {
    this.allRawNodesJsons = allRawNodesJsons;
    return this;
  }

  public void unsetAllRawNodesJsons() {
    this.allRawNodesJsons = null;
  }

  /** Returns true if field allRawNodesJsons is set (has been assigned a value) and false otherwise */
  public boolean isSetAllRawNodesJsons() {
    return this.allRawNodesJsons != null;
  }

  public void setAllRawNodesJsonsIsSet(boolean value) {
    if (!value) {
      this.allRawNodesJsons = null;
    }
  }

  public int getBuildFileDependentsSize() {
    return (this.buildFileDependents == null) ? 0 : this.buildFileDependents.size();
  }

  public void putToBuildFileDependents(java.lang.String key, java.util.List<java.lang.String> val) {
    if (this.buildFileDependents == null) {
      this.buildFileDependents = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>();
    }
    this.buildFileDependents.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.List<java.lang.String>> getBuildFileDependents() {
    return this.buildFileDependents;
  }

  public RemoteDaemonicCellState setBuildFileDependents(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<java.lang.String>> buildFileDependents) {
    this.buildFileDependents = buildFileDependents;
    return this;
  }

  public void unsetBuildFileDependents() {
    this.buildFileDependents = null;
  }

  /** Returns true if field buildFileDependents is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildFileDependents() {
    return this.buildFileDependents != null;
  }

  public void setBuildFileDependentsIsSet(boolean value) {
    if (!value) {
      this.buildFileDependents = null;
    }
  }

  public int getBuildFileEnvSize() {
    return (this.buildFileEnv == null) ? 0 : this.buildFileEnv.size();
  }

  public void putToBuildFileEnv(java.lang.String key, java.util.Map<java.lang.String,BuildFileEnvProperty> val) {
    if (this.buildFileEnv == null) {
      this.buildFileEnv = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>>();
    }
    this.buildFileEnv.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>> getBuildFileEnv() {
    return this.buildFileEnv;
  }

  public RemoteDaemonicCellState setBuildFileEnv(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>> buildFileEnv) {
    this.buildFileEnv = buildFileEnv;
    return this;
  }

  public void unsetBuildFileEnv() {
    this.buildFileEnv = null;
  }

  /** Returns true if field buildFileEnv is set (has been assigned a value) and false otherwise */
  public boolean isSetBuildFileEnv() {
    return this.buildFileEnv != null;
  }

  public void setBuildFileEnvIsSet(boolean value) {
    if (!value) {
      this.buildFileEnv = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ALL_RAW_NODES_JSONS:
      if (value == null) {
        unsetAllRawNodesJsons();
      } else {
        setAllRawNodesJsons((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case BUILD_FILE_DEPENDENTS:
      if (value == null) {
        unsetBuildFileDependents();
      } else {
        setBuildFileDependents((java.util.Map<java.lang.String,java.util.List<java.lang.String>>)value);
      }
      break;

    case BUILD_FILE_ENV:
      if (value == null) {
        unsetBuildFileEnv();
      } else {
        setBuildFileEnv((java.util.Map<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ALL_RAW_NODES_JSONS:
      return getAllRawNodesJsons();

    case BUILD_FILE_DEPENDENTS:
      return getBuildFileDependents();

    case BUILD_FILE_ENV:
      return getBuildFileEnv();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ALL_RAW_NODES_JSONS:
      return isSetAllRawNodesJsons();
    case BUILD_FILE_DEPENDENTS:
      return isSetBuildFileDependents();
    case BUILD_FILE_ENV:
      return isSetBuildFileEnv();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RemoteDaemonicCellState)
      return this.equals((RemoteDaemonicCellState)that);
    return false;
  }

  public boolean equals(RemoteDaemonicCellState that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_allRawNodesJsons = true && this.isSetAllRawNodesJsons();
    boolean that_present_allRawNodesJsons = true && that.isSetAllRawNodesJsons();
    if (this_present_allRawNodesJsons || that_present_allRawNodesJsons) {
      if (!(this_present_allRawNodesJsons && that_present_allRawNodesJsons))
        return false;
      if (!this.allRawNodesJsons.equals(that.allRawNodesJsons))
        return false;
    }

    boolean this_present_buildFileDependents = true && this.isSetBuildFileDependents();
    boolean that_present_buildFileDependents = true && that.isSetBuildFileDependents();
    if (this_present_buildFileDependents || that_present_buildFileDependents) {
      if (!(this_present_buildFileDependents && that_present_buildFileDependents))
        return false;
      if (!this.buildFileDependents.equals(that.buildFileDependents))
        return false;
    }

    boolean this_present_buildFileEnv = true && this.isSetBuildFileEnv();
    boolean that_present_buildFileEnv = true && that.isSetBuildFileEnv();
    if (this_present_buildFileEnv || that_present_buildFileEnv) {
      if (!(this_present_buildFileEnv && that_present_buildFileEnv))
        return false;
      if (!this.buildFileEnv.equals(that.buildFileEnv))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAllRawNodesJsons()) ? 131071 : 524287);
    if (isSetAllRawNodesJsons())
      hashCode = hashCode * 8191 + allRawNodesJsons.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuildFileDependents()) ? 131071 : 524287);
    if (isSetBuildFileDependents())
      hashCode = hashCode * 8191 + buildFileDependents.hashCode();

    hashCode = hashCode * 8191 + ((isSetBuildFileEnv()) ? 131071 : 524287);
    if (isSetBuildFileEnv())
      hashCode = hashCode * 8191 + buildFileEnv.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RemoteDaemonicCellState other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAllRawNodesJsons()).compareTo(other.isSetAllRawNodesJsons());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllRawNodesJsons()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allRawNodesJsons, other.allRawNodesJsons);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuildFileDependents()).compareTo(other.isSetBuildFileDependents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildFileDependents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildFileDependents, other.buildFileDependents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBuildFileEnv()).compareTo(other.isSetBuildFileEnv());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuildFileEnv()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.buildFileEnv, other.buildFileEnv);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RemoteDaemonicCellState(");
    boolean first = true;

    if (isSetAllRawNodesJsons()) {
      sb.append("allRawNodesJsons:");
      if (this.allRawNodesJsons == null) {
        sb.append("null");
      } else {
        sb.append(this.allRawNodesJsons);
      }
      first = false;
    }
    if (isSetBuildFileDependents()) {
      if (!first) sb.append(", ");
      sb.append("buildFileDependents:");
      if (this.buildFileDependents == null) {
        sb.append("null");
      } else {
        sb.append(this.buildFileDependents);
      }
      first = false;
    }
    if (isSetBuildFileEnv()) {
      if (!first) sb.append(", ");
      sb.append("buildFileEnv:");
      if (this.buildFileEnv == null) {
        sb.append("null");
      } else {
        sb.append(this.buildFileEnv);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RemoteDaemonicCellStateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RemoteDaemonicCellStateStandardScheme getScheme() {
      return new RemoteDaemonicCellStateStandardScheme();
    }
  }

  private static class RemoteDaemonicCellStateStandardScheme extends org.apache.thrift.scheme.StandardScheme<RemoteDaemonicCellState> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RemoteDaemonicCellState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALL_RAW_NODES_JSONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map36 = iprot.readMapBegin();
                struct.allRawNodesJsons = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map36.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key37;
                @org.apache.thrift.annotation.Nullable java.lang.String _val38;
                for (int _i39 = 0; _i39 < _map36.size; ++_i39)
                {
                  _key37 = iprot.readString();
                  _val38 = iprot.readString();
                  struct.allRawNodesJsons.put(_key37, _val38);
                }
                iprot.readMapEnd();
              }
              struct.setAllRawNodesJsonsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BUILD_FILE_DEPENDENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                struct.buildFileDependents = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map40.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key41;
                @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val42;
                for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                {
                  _key41 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list44 = iprot.readListBegin();
                    _val42 = new java.util.ArrayList<java.lang.String>(_list44.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _elem45;
                    for (int _i46 = 0; _i46 < _list44.size; ++_i46)
                    {
                      _elem45 = iprot.readString();
                      _val42.add(_elem45);
                    }
                    iprot.readListEnd();
                  }
                  struct.buildFileDependents.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setBuildFileDependentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUILD_FILE_ENV
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map47 = iprot.readMapBegin();
                struct.buildFileEnv = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>>(2*_map47.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key48;
                @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,BuildFileEnvProperty> _val49;
                for (int _i50 = 0; _i50 < _map47.size; ++_i50)
                {
                  _key48 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map51 = iprot.readMapBegin();
                    _val49 = new java.util.HashMap<java.lang.String,BuildFileEnvProperty>(2*_map51.size);
                    @org.apache.thrift.annotation.Nullable java.lang.String _key52;
                    @org.apache.thrift.annotation.Nullable BuildFileEnvProperty _val53;
                    for (int _i54 = 0; _i54 < _map51.size; ++_i54)
                    {
                      _key52 = iprot.readString();
                      _val53 = new BuildFileEnvProperty();
                      _val53.read(iprot);
                      _val49.put(_key52, _val53);
                    }
                    iprot.readMapEnd();
                  }
                  struct.buildFileEnv.put(_key48, _val49);
                }
                iprot.readMapEnd();
              }
              struct.setBuildFileEnvIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RemoteDaemonicCellState struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.allRawNodesJsons != null) {
        if (struct.isSetAllRawNodesJsons()) {
          oprot.writeFieldBegin(ALL_RAW_NODES_JSONS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.allRawNodesJsons.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter55 : struct.allRawNodesJsons.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildFileDependents != null) {
        if (struct.isSetBuildFileDependents()) {
          oprot.writeFieldBegin(BUILD_FILE_DEPENDENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.buildFileDependents.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter56 : struct.buildFileDependents.entrySet())
            {
              oprot.writeString(_iter56.getKey());
              {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter56.getValue().size()));
                for (java.lang.String _iter57 : _iter56.getValue())
                {
                  oprot.writeString(_iter57);
                }
                oprot.writeListEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.buildFileEnv != null) {
        if (struct.isSetBuildFileEnv()) {
          oprot.writeFieldBegin(BUILD_FILE_ENV_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.buildFileEnv.size()));
            for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,BuildFileEnvProperty>> _iter58 : struct.buildFileEnv.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, _iter58.getValue().size()));
                for (java.util.Map.Entry<java.lang.String, BuildFileEnvProperty> _iter59 : _iter58.getValue().entrySet())
                {
                  oprot.writeString(_iter59.getKey());
                  _iter59.getValue().write(oprot);
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RemoteDaemonicCellStateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RemoteDaemonicCellStateTupleScheme getScheme() {
      return new RemoteDaemonicCellStateTupleScheme();
    }
  }

  private static class RemoteDaemonicCellStateTupleScheme extends org.apache.thrift.scheme.TupleScheme<RemoteDaemonicCellState> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RemoteDaemonicCellState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAllRawNodesJsons()) {
        optionals.set(0);
      }
      if (struct.isSetBuildFileDependents()) {
        optionals.set(1);
      }
      if (struct.isSetBuildFileEnv()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetAllRawNodesJsons()) {
        {
          oprot.writeI32(struct.allRawNodesJsons.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter60 : struct.allRawNodesJsons.entrySet())
          {
            oprot.writeString(_iter60.getKey());
            oprot.writeString(_iter60.getValue());
          }
        }
      }
      if (struct.isSetBuildFileDependents()) {
        {
          oprot.writeI32(struct.buildFileDependents.size());
          for (java.util.Map.Entry<java.lang.String, java.util.List<java.lang.String>> _iter61 : struct.buildFileDependents.entrySet())
          {
            oprot.writeString(_iter61.getKey());
            {
              oprot.writeI32(_iter61.getValue().size());
              for (java.lang.String _iter62 : _iter61.getValue())
              {
                oprot.writeString(_iter62);
              }
            }
          }
        }
      }
      if (struct.isSetBuildFileEnv()) {
        {
          oprot.writeI32(struct.buildFileEnv.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,BuildFileEnvProperty>> _iter63 : struct.buildFileEnv.entrySet())
          {
            oprot.writeString(_iter63.getKey());
            {
              oprot.writeI32(_iter63.getValue().size());
              for (java.util.Map.Entry<java.lang.String, BuildFileEnvProperty> _iter64 : _iter63.getValue().entrySet())
              {
                oprot.writeString(_iter64.getKey());
                _iter64.getValue().write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RemoteDaemonicCellState struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map65 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.allRawNodesJsons = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map65.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key66;
          @org.apache.thrift.annotation.Nullable java.lang.String _val67;
          for (int _i68 = 0; _i68 < _map65.size; ++_i68)
          {
            _key66 = iprot.readString();
            _val67 = iprot.readString();
            struct.allRawNodesJsons.put(_key66, _val67);
          }
        }
        struct.setAllRawNodesJsonsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map69 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.buildFileDependents = new java.util.HashMap<java.lang.String,java.util.List<java.lang.String>>(2*_map69.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key70;
          @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> _val71;
          for (int _i72 = 0; _i72 < _map69.size; ++_i72)
          {
            _key70 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list73 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val71 = new java.util.ArrayList<java.lang.String>(_list73.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _elem74;
              for (int _i75 = 0; _i75 < _list73.size; ++_i75)
              {
                _elem74 = iprot.readString();
                _val71.add(_elem74);
              }
            }
            struct.buildFileDependents.put(_key70, _val71);
          }
        }
        struct.setBuildFileDependentsIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.buildFileEnv = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,BuildFileEnvProperty>>(2*_map76.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key77;
          @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,BuildFileEnvProperty> _val78;
          for (int _i79 = 0; _i79 < _map76.size; ++_i79)
          {
            _key77 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val78 = new java.util.HashMap<java.lang.String,BuildFileEnvProperty>(2*_map80.size);
              @org.apache.thrift.annotation.Nullable java.lang.String _key81;
              @org.apache.thrift.annotation.Nullable BuildFileEnvProperty _val82;
              for (int _i83 = 0; _i83 < _map80.size; ++_i83)
              {
                _key81 = iprot.readString();
                _val82 = new BuildFileEnvProperty();
                _val82.read(iprot);
                _val78.put(_key81, _val82);
              }
            }
            struct.buildFileEnv.put(_key77, _val78);
          }
        }
        struct.setBuildFileEnvIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

