/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.buck.artifact_cache.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)")
public class StoreDebugInfo implements org.apache.thrift.TBase<StoreDebugInfo, StoreDebugInfo._Fields>, java.io.Serializable, Cloneable, Comparable<StoreDebugInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StoreDebugInfo");

  private static final org.apache.thrift.protocol.TField STORES_WRITTEN_INTO_FIELD_DESC = new org.apache.thrift.protocol.TField("storesWrittenInto", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField ARTIFACT_SIZE_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("artifactSizeBytes", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StoreDebugInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StoreDebugInfoTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> storesWrittenInto; // optional
  public long artifactSizeBytes; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STORES_WRITTEN_INTO((short)1, "storesWrittenInto"),
    ARTIFACT_SIZE_BYTES((short)2, "artifactSizeBytes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STORES_WRITTEN_INTO
          return STORES_WRITTEN_INTO;
        case 2: // ARTIFACT_SIZE_BYTES
          return ARTIFACT_SIZE_BYTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARTIFACTSIZEBYTES_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STORES_WRITTEN_INTO,_Fields.ARTIFACT_SIZE_BYTES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STORES_WRITTEN_INTO, new org.apache.thrift.meta_data.FieldMetaData("storesWrittenInto", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ARTIFACT_SIZE_BYTES, new org.apache.thrift.meta_data.FieldMetaData("artifactSizeBytes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StoreDebugInfo.class, metaDataMap);
  }

  public StoreDebugInfo() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StoreDebugInfo(StoreDebugInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStoresWrittenInto()) {
      java.util.List<java.lang.String> __this__storesWrittenInto = new java.util.ArrayList<java.lang.String>(other.storesWrittenInto);
      this.storesWrittenInto = __this__storesWrittenInto;
    }
    this.artifactSizeBytes = other.artifactSizeBytes;
  }

  public StoreDebugInfo deepCopy() {
    return new StoreDebugInfo(this);
  }

  @Override
  public void clear() {
    this.storesWrittenInto = null;
    setArtifactSizeBytesIsSet(false);
    this.artifactSizeBytes = 0;
  }

  public int getStoresWrittenIntoSize() {
    return (this.storesWrittenInto == null) ? 0 : this.storesWrittenInto.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getStoresWrittenIntoIterator() {
    return (this.storesWrittenInto == null) ? null : this.storesWrittenInto.iterator();
  }

  public void addToStoresWrittenInto(java.lang.String elem) {
    if (this.storesWrittenInto == null) {
      this.storesWrittenInto = new java.util.ArrayList<java.lang.String>();
    }
    this.storesWrittenInto.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getStoresWrittenInto() {
    return this.storesWrittenInto;
  }

  public StoreDebugInfo setStoresWrittenInto(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> storesWrittenInto) {
    this.storesWrittenInto = storesWrittenInto;
    return this;
  }

  public void unsetStoresWrittenInto() {
    this.storesWrittenInto = null;
  }

  /** Returns true if field storesWrittenInto is set (has been assigned a value) and false otherwise */
  public boolean isSetStoresWrittenInto() {
    return this.storesWrittenInto != null;
  }

  public void setStoresWrittenIntoIsSet(boolean value) {
    if (!value) {
      this.storesWrittenInto = null;
    }
  }

  public long getArtifactSizeBytes() {
    return this.artifactSizeBytes;
  }

  public StoreDebugInfo setArtifactSizeBytes(long artifactSizeBytes) {
    this.artifactSizeBytes = artifactSizeBytes;
    setArtifactSizeBytesIsSet(true);
    return this;
  }

  public void unsetArtifactSizeBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ARTIFACTSIZEBYTES_ISSET_ID);
  }

  /** Returns true if field artifactSizeBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetArtifactSizeBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ARTIFACTSIZEBYTES_ISSET_ID);
  }

  public void setArtifactSizeBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ARTIFACTSIZEBYTES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STORES_WRITTEN_INTO:
      if (value == null) {
        unsetStoresWrittenInto();
      } else {
        setStoresWrittenInto((java.util.List<java.lang.String>)value);
      }
      break;

    case ARTIFACT_SIZE_BYTES:
      if (value == null) {
        unsetArtifactSizeBytes();
      } else {
        setArtifactSizeBytes((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STORES_WRITTEN_INTO:
      return getStoresWrittenInto();

    case ARTIFACT_SIZE_BYTES:
      return getArtifactSizeBytes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STORES_WRITTEN_INTO:
      return isSetStoresWrittenInto();
    case ARTIFACT_SIZE_BYTES:
      return isSetArtifactSizeBytes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StoreDebugInfo)
      return this.equals((StoreDebugInfo)that);
    return false;
  }

  public boolean equals(StoreDebugInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_storesWrittenInto = true && this.isSetStoresWrittenInto();
    boolean that_present_storesWrittenInto = true && that.isSetStoresWrittenInto();
    if (this_present_storesWrittenInto || that_present_storesWrittenInto) {
      if (!(this_present_storesWrittenInto && that_present_storesWrittenInto))
        return false;
      if (!this.storesWrittenInto.equals(that.storesWrittenInto))
        return false;
    }

    boolean this_present_artifactSizeBytes = true && this.isSetArtifactSizeBytes();
    boolean that_present_artifactSizeBytes = true && that.isSetArtifactSizeBytes();
    if (this_present_artifactSizeBytes || that_present_artifactSizeBytes) {
      if (!(this_present_artifactSizeBytes && that_present_artifactSizeBytes))
        return false;
      if (this.artifactSizeBytes != that.artifactSizeBytes)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStoresWrittenInto()) ? 131071 : 524287);
    if (isSetStoresWrittenInto())
      hashCode = hashCode * 8191 + storesWrittenInto.hashCode();

    hashCode = hashCode * 8191 + ((isSetArtifactSizeBytes()) ? 131071 : 524287);
    if (isSetArtifactSizeBytes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(artifactSizeBytes);

    return hashCode;
  }

  @Override
  public int compareTo(StoreDebugInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStoresWrittenInto()).compareTo(other.isSetStoresWrittenInto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoresWrittenInto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storesWrittenInto, other.storesWrittenInto);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArtifactSizeBytes()).compareTo(other.isSetArtifactSizeBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArtifactSizeBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.artifactSizeBytes, other.artifactSizeBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StoreDebugInfo(");
    boolean first = true;

    if (isSetStoresWrittenInto()) {
      sb.append("storesWrittenInto:");
      if (this.storesWrittenInto == null) {
        sb.append("null");
      } else {
        sb.append(this.storesWrittenInto);
      }
      first = false;
    }
    if (isSetArtifactSizeBytes()) {
      if (!first) sb.append(", ");
      sb.append("artifactSizeBytes:");
      sb.append(this.artifactSizeBytes);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StoreDebugInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StoreDebugInfoStandardScheme getScheme() {
      return new StoreDebugInfoStandardScheme();
    }
  }

  private static class StoreDebugInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<StoreDebugInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StoreDebugInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STORES_WRITTEN_INTO
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                struct.storesWrittenInto = new java.util.ArrayList<java.lang.String>(_list26.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem27;
                for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                {
                  _elem27 = iprot.readString();
                  struct.storesWrittenInto.add(_elem27);
                }
                iprot.readListEnd();
              }
              struct.setStoresWrittenIntoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARTIFACT_SIZE_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.artifactSizeBytes = iprot.readI64();
              struct.setArtifactSizeBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StoreDebugInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.storesWrittenInto != null) {
        if (struct.isSetStoresWrittenInto()) {
          oprot.writeFieldBegin(STORES_WRITTEN_INTO_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.storesWrittenInto.size()));
            for (java.lang.String _iter29 : struct.storesWrittenInto)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetArtifactSizeBytes()) {
        oprot.writeFieldBegin(ARTIFACT_SIZE_BYTES_FIELD_DESC);
        oprot.writeI64(struct.artifactSizeBytes);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StoreDebugInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StoreDebugInfoTupleScheme getScheme() {
      return new StoreDebugInfoTupleScheme();
    }
  }

  private static class StoreDebugInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<StoreDebugInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StoreDebugInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStoresWrittenInto()) {
        optionals.set(0);
      }
      if (struct.isSetArtifactSizeBytes()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetStoresWrittenInto()) {
        {
          oprot.writeI32(struct.storesWrittenInto.size());
          for (java.lang.String _iter30 : struct.storesWrittenInto)
          {
            oprot.writeString(_iter30);
          }
        }
      }
      if (struct.isSetArtifactSizeBytes()) {
        oprot.writeI64(struct.artifactSizeBytes);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StoreDebugInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.storesWrittenInto = new java.util.ArrayList<java.lang.String>(_list31.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = iprot.readString();
            struct.storesWrittenInto.add(_elem32);
          }
        }
        struct.setStoresWrittenIntoIsSet(true);
      }
      if (incoming.get(1)) {
        struct.artifactSizeBytes = iprot.readI64();
        struct.setArtifactSizeBytesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

